/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,23],$V2=[1,20],$V3=[1,16],$V4=[1,22],$V5=[1,18],$V6=[1,10],$V7=[1,11],$V8=[1,17],$V9=[1,21],$Va=[1,27],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,29],$Vf=[5,40,70],$Vg=[2,69],$Vh=[1,30],$Vi=[19,20,38,42,44,46,47,57,77,78,111,113,116,123,124,125],$Vj=[5,21,23,25,26,28,32,33,34,37,40,42,49,58,61,62,63,64,65,66,67,68,69,70,72,119,120,121,122],$Vk=[1,33],$Vl=[5,21,23,25,26,28,32,33,34,37,40,42,49,58,61,62,63,64,65,66,67,68,69,70,72,74,119,120,121,122],$Vm=[1,35],$Vn=[5,21,23,25,26,28,32,33,34,37,40,42,43,49,58,61,62,63,64,65,66,67,68,69,70,72,74,78,80,81,82,83,84,85,94,95,100,101,103,119,120,121,122],$Vo=[1,56],$Vp=[1,57],$Vq=[5,21,23,25,26,28,32,33,34,37,40,42,43,49,58,61,62,63,64,65,66,67,68,69,70,72,74,78,80,81,82,83,84,85,94,95,100,101,103,105,106,119,120,121,122],$Vr=[1,59],$Vs=[1,58],$Vt=[1,60],$Vu=[5,21,23,25,26,28,32,33,34,37,40,42,43,46,49,58,61,62,63,64,65,66,67,68,69,70,72,74,78,80,81,82,83,84,85,94,95,100,101,103,105,106,108,109,119,120,121,122],$Vv=[20,38,42,44,46,47,57,77,78,111,113,116,123,124,125],$Vw=[20,38,42,44,57,91,92,93,111,113,116,123,124,125],$Vx=[1,97],$Vy=[2,110],$Vz=[1,98],$VA=[1,99],$VB=[1,109],$VC=[1,110],$VD=[28,40],$VE=[5,21,23,25,26,37,40,70],$VF=[5,21,23,25,26,28,37,40,49,70],$VG=[2,50],$VH=[1,140],$VI=[1,141],$VJ=[5,23,25,26,37,40,70],$VK=[1,167],$VL=[1,165],$VM=[1,166],$VN=[5,21,23,25,26,28,37,40,49,54,59,61,62,63,64,65,66,67,68,69,70],$VO=[1,179],$VP=[2,136],$VQ=[119,120,122],$VR=[5,25,26,37,40,70],$VS=[5,21,23,25,26,28,37,40,70],$VT=[1,187],$VU=[1,188],$VV=[1,189],$VW=[1,190],$VX=[1,191],$VY=[1,192],$VZ=[1,193],$V_=[1,194],$V$=[1,195],$V01=[5,21,23,25,26,28,37,40,61,62,63,64,65,66,67,68,69,70],$V11=[5,21,23,25,26,28,37,40,42,54,58,59,61,62,63,64,65,66,67,68,69,70],$V21=[1,198],$V31=[5,25,26,28,37,40,70],$V41=[5,26,37,40,70],$V51=[38,42,57],$V61=[5,21,23,25,26,28,37,40,54,61,62,63,64,65,66,67,68,69,70],$V71=[5,37,40,70],$V81=[5,28,37,40,70],$V91=[5,28,34,37,40,70],$Va1=[1,232],$Vb1=[1,241],$Vc1=[1,239],$Vd1=[1,240],$Ve1=[1,242],$Vf1=[20,28,40,42,43,44];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"expressionPlus":6,"selectClauseItem":7,"SELECT":8,"optDistinctClause":9,"optTopClause":10,"selectExprList":11,"optTableExprList":12,"optWhereClause":13,"optGroupByClause":14,"optHavingClause":15,"optOrderByClause":16,"optQueryHintsClause":17,"DISTINCT":18,"TOP":19,"NUMERIC":20,"WHERE":21,"expression":22,"GROUP_BY":23,"commaSepExpressionList":24,"HAVING":25,"ORDER_BY":26,"orderByList":27,"COMMA":28,"orderByListItem":29,"optOrderByOrder":30,"optOrderByNulls":31,"ASC":32,"DESC":33,"NULLS":34,"FIRST":35,"LAST":36,"OPTION":37,"LPAREN":38,"queryHintList":39,"RPAREN":40,"queryHint":41,"IDENTIFIER":42,"CMP_EQUALS":43,"STRING":44,"selectExpr":45,"STAR":46,"QUALIFIED_STAR":47,"optTableExprAlias":48,"FROM":49,"tableExprList":50,"tableExpr":51,"joinComponent":52,"optJoinModifier":53,"ON":54,"tableExprPart":55,"optTableHintsClause":56,"QUALIFIED_IDENTIFIER":57,"AS":58,"WITH":59,"tableHintList":60,"JOIN":61,"LEFT_JOIN":62,"LEFT_OUTER_JOIN":63,"RIGHT_JOIN":64,"RIGHT_OUTER_JOIN":65,"FULL_JOIN":66,"INNER_JOIN":67,"CROSS_JOIN":68,"NATURAL_JOIN":69,"SET_OPERATOR":70,"andCondition":71,"LOGICAL_OR":72,"condition":73,"LOGICAL_AND":74,"operand":75,"conditionRightHandSide":76,"EXISTS":77,"LOGICAL_NOT":78,"compare":79,"CMP_NOTEQUALS":80,"CMP_NOTEQUALS_BASIC":81,"CMP_GREATER":82,"CMP_GREATEROREQUAL":83,"CMP_LESS":84,"CMP_LESSOREQUAL":85,"rhsCompareTest":86,"rhsIsTest":87,"rhsInTest":88,"rhsLikeTest":89,"rhsBetweenTest":90,"ALL":91,"ANY":92,"SOME":93,"IS":94,"IN":95,"rhsInClause":96,"functionParam":97,"functionExpressionList":98,"optFunctionExpressionList":99,"LIKE":100,"BETWEEN":101,"summand":102,"CONCAT":103,"factor":104,"PLUS":105,"MINUS":106,"term":107,"DIVIDE":108,"MODULO":109,"value":110,"QUOTED_IDENTIFIER":111,"caseWhen":112,"CAST":113,"dataType":114,"optDataTypeLength":115,"CASE":116,"caseWhenList":117,"optCaseWhenElse":118,"END":119,"WHEN":120,"THEN":121,"ELSE":122,"BOOLEAN":123,"NULL":124,"BIND":125,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SELECT",18:"DISTINCT",19:"TOP",20:"NUMERIC",21:"WHERE",23:"GROUP_BY",25:"HAVING",26:"ORDER_BY",28:"COMMA",32:"ASC",33:"DESC",34:"NULLS",35:"FIRST",36:"LAST",37:"OPTION",38:"LPAREN",40:"RPAREN",42:"IDENTIFIER",43:"CMP_EQUALS",44:"STRING",46:"STAR",47:"QUALIFIED_STAR",49:"FROM",54:"ON",57:"QUALIFIED_IDENTIFIER",58:"AS",59:"WITH",61:"JOIN",62:"LEFT_JOIN",63:"LEFT_OUTER_JOIN",64:"RIGHT_JOIN",65:"RIGHT_OUTER_JOIN",66:"FULL_JOIN",67:"INNER_JOIN",68:"CROSS_JOIN",69:"NATURAL_JOIN",70:"SET_OPERATOR",72:"LOGICAL_OR",74:"LOGICAL_AND",77:"EXISTS",78:"LOGICAL_NOT",80:"CMP_NOTEQUALS",81:"CMP_NOTEQUALS_BASIC",82:"CMP_GREATER",83:"CMP_GREATEROREQUAL",84:"CMP_LESS",85:"CMP_LESSOREQUAL",91:"ALL",92:"ANY",93:"SOME",94:"IS",95:"IN",100:"LIKE",101:"BETWEEN",103:"CONCAT",105:"PLUS",106:"MINUS",108:"DIVIDE",109:"MODULO",111:"QUOTED_IDENTIFIER",113:"CAST",116:"CASE",119:"END",120:"WHEN",121:"THEN",122:"ELSE",123:"BOOLEAN",124:"NULL",125:"BIND"},
productions_: [0,[3,2],[4,1],[7,10],[9,0],[9,1],[10,0],[10,2],[13,0],[13,2],[14,0],[14,2],[15,0],[15,2],[16,0],[16,2],[27,3],[27,1],[29,3],[30,0],[30,1],[30,1],[31,0],[31,2],[31,2],[17,0],[17,4],[39,3],[39,1],[41,2],[41,2],[41,2],[41,2],[41,1],[11,1],[11,3],[45,1],[45,1],[45,2],[12,0],[12,2],[50,1],[50,3],[51,1],[51,3],[51,5],[52,3],[55,1],[55,1],[55,3],[48,0],[48,1],[48,2],[56,0],[56,4],[60,3],[60,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[6,3],[6,3],[6,1],[6,1],[22,1],[22,3],[71,1],[71,3],[73,1],[73,2],[73,4],[73,2],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[76,1],[76,1],[76,1],[76,1],[76,1],[86,2],[86,5],[86,5],[86,5],[87,2],[87,3],[87,4],[87,5],[88,4],[88,5],[96,1],[96,3],[24,3],[24,1],[97,1],[97,2],[97,1],[97,1],[98,3],[98,1],[99,0],[99,1],[89,2],[89,3],[90,4],[90,5],[75,1],[75,3],[102,1],[102,3],[102,3],[104,1],[104,3],[104,3],[104,3],[107,1],[107,1],[107,1],[107,1],[107,1],[107,3],[107,4],[107,4],[107,6],[114,2],[114,2],[115,0],[115,3],[112,4],[117,5],[117,4],[118,0],[118,2],[110,1],[110,1],[110,1],[110,1],[110,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2: case 7: case 9: case 11: case 13: case 15: case 20: case 21: case 40: case 47: case 48: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 104: case 106: case 107: case 111: case 116: case 118: case 121: case 129: case 142: case 143: case 144: case 145: case 146: case 147:
 this.$ = $$[$0]; 
break;
case 3:
 this.$ = {nodeType: 'Select', distinct: $$[$0-8], top: $$[$0-7], columns: $$[$0-6], from: $$[$0-5], where:$$[$0-4], groupBy:$$[$0-3], having:$$[$0-2], orderBy:$$[$0-1], queryHints:$$[$0]}; 
break;
case 4:
 this.$ = false; 
break;
case 5:
 this.$ = true; 
break;
case 6: case 8: case 10: case 12: case 14: case 25: case 50: case 53: case 110: case 136: case 141:
 this.$ = null; 
break;
case 16: case 27: case 35: case 42: case 55: case 73: case 102: case 108:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 28: case 33: case 34: case 41: case 56: case 72: case 103: case 109:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 19: case 57:
 this.$ = ''; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 26: case 49: case 54: case 98: case 137:
 this.$ = $$[$0-1]; 
break;
case 29: case 30: case 31: case 32:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 36:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 37:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 38:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 39:
 this.$ = []; 
break;
case 43:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 44:
 this.$ = $$[$0-2]; $$[$0-2].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-1]}); 
break;
case 45:
 this.$ = $$[$0-4]; $$[$0-4].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-3], expression:$$[$0]}); 
break;
case 46:
 this.$ = {exprName: $$[$0-2], alias: $$[$0-1], tableHints: $$[$0]}; 
break;
case 51:
 this.$ = {value: $$[$0] }; 
break;
case 52:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 58:
 this.$ = 'LEFT'; 
break;
case 59:
 this.$ = 'LEFT OUTER'; 
break;
case 60:
 this.$ = 'RIGHT'; 
break;
case 61:
 this.$ = 'RIGHT OUTER'; 
break;
case 62:
 this.$ = 'FULL'; 
break;
case 63:
 this.$ = 'INNER'; 
break;
case 64:
 this.$ = 'CROSS'; 
break;
case 65:
 this.$ = 'NATURAL'; 
break;
case 66: case 67:
 this.$ = $$[$0-2]; $$[$0-2].push({nodeType:'SetOperator', value:$$[$0-1]}); $$[$0-2].push($$[$0]); 
break;
case 68: case 69:
 this.$ = [$$[$0]] 
break;
case 70:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 71:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 74:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 75:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 76:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 77:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 90:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 91: case 92: case 93:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 94:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 95:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 96:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 97:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 99:
 this.$ = $$[$0-1]; $$[$0-1].not = 1; 
break;
case 100:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0]}; 
break;
case 101:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0]}; $$[$0].unshift($$[$0-2]); 
break;
case 105:
 this.$ = { nodeType: 'DistinctFunctionParam', value: $$[$0]}; 
break;
case 112:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 113:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 114:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 115:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 117:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 119: case 120:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 122: case 123: case 124:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 125: case 126: case 127: case 128:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 130:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 131: case 132:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 133:
 this.$ = {nodeType: 'Cast', expression:$$[$0-3], dataType:$$[$0-1]}; 
break;
case 134: case 135:
 this.$ = {name: $$[$0-1], len: $$[$0]}; 
break;
case 138:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 139:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 140:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{1:[3]},{5:[1,28]},o([5,40],[2,2],{70:$Ve}),o($Vf,[2,68]),o($Vf,$Vg,{72:$Vh}),o($Vi,[2,4],{9:31,18:[1,32]}),o($Vj,[2,70],{74:$Vk}),o($Vl,[2,72]),o($Vl,[2,74],{76:34,86:36,87:37,88:38,89:39,90:40,79:41,43:[1,47],78:[1,44],80:[1,48],81:[1,49],82:[1,50],83:[1,51],84:[1,52],85:[1,53],94:[1,42],95:[1,43],100:[1,45],101:[1,46],103:$Vm}),{38:[1,54]},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,73:55,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vn,[2,116],{105:$Vo,106:$Vp}),o($Vq,[2,118],{46:$Vr,108:$Vs,109:$Vt}),o($Vu,[2,121]),o($Vu,[2,125]),o($Vu,[2,126],{38:[1,61]}),o($Vu,[2,127]),o($Vu,[2,128],{38:[1,62]}),o($Vu,[2,129]),{6:63,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{38:[1,64]},o($Vu,[2,143]),o($Vu,[2,144]),o($Vu,[2,145]),o($Vu,[2,146]),o($Vu,[2,147]),{117:65,120:[1,66]},{1:[2,1]},{7:67,8:$V0,20:$V1,22:68,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,71:69,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vv,[2,6],{10:70,19:[1,71]}),o($Vi,[2,5]),{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,73:72,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,75]),{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,102:73,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,85]),o($Vl,[2,86]),o($Vl,[2,87]),o($Vl,[2,88]),o($Vl,[2,89]),{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:74,91:[1,75],92:[1,76],93:[1,77],102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{18:[1,80],20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:78,78:[1,79],102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{38:[1,81]},{95:[1,82],100:[1,83],101:[1,84]},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:85,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:86,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vw,[2,78]),o($Vw,[2,79]),o($Vw,[2,80]),o($Vw,[2,81]),o($Vw,[2,82]),o($Vw,[2,83]),o($Vw,[2,84]),{4:87,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,77]),{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,104:88,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,104:89,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,107:90,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,107:91,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,107:92,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{18:$Vx,20:$V1,22:96,38:$V2,40:$Vy,42:$V3,44:$V4,46:$Vz,47:$VA,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,97:95,98:94,99:93,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{18:$Vx,20:$V1,22:96,38:$V2,40:$Vy,42:$V3,44:$V4,46:$Vz,47:$VA,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,97:95,98:94,99:100,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,101],70:$Ve},{20:$V1,22:102,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{118:103,119:[2,141],120:[1,104],122:[1,105]},{20:$V1,22:106,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vf,[2,66]),o($Vf,[2,67],{72:$Vh}),o($Vj,[2,71],{74:$Vk}),{11:107,20:$V1,22:111,38:$V2,42:$V3,44:$V4,45:108,46:$VB,47:$VC,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:[1,112]},o($Vl,[2,73]),o($Vn,[2,117],{105:$Vo,106:$Vp}),o($Vl,[2,90],{103:$Vm}),{38:[1,113]},{38:[1,114]},{38:[1,115]},o($Vl,[2,94],{103:$Vm}),{18:[1,117],20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:116,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{49:[1,118]},{4:120,6:3,7:4,8:$V0,20:$V1,22:121,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,96:119,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{38:[1,122]},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:123,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:124,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,112],{103:$Vm}),{74:[1,125],103:$Vm},{40:[1,126]},o($Vq,[2,119],{46:$Vr,108:$Vs,109:$Vt}),o($Vq,[2,120],{46:$Vr,108:$Vs,109:$Vt}),o($Vu,[2,122]),o($Vu,[2,123]),o($Vu,[2,124]),{40:[1,127]},{28:[1,128],40:[2,111]},o($VD,[2,109]),o($VD,[2,104],{72:$Vh}),{20:$V1,22:129,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VD,[2,106]),o($VD,[2,107]),{40:[1,130]},o($Vu,[2,130]),{58:[1,131],72:$Vh},{119:[1,132]},{20:$V1,22:133,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{20:$V1,22:134,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{72:$Vh,121:[1,135]},o($VE,[2,39],{12:136,28:[1,137],49:[1,138]}),o($VF,[2,34]),o($VF,[2,36]),o($VF,[2,37]),o($VF,$VG,{48:139,42:$VH,58:$VI,72:$Vh}),o($Vv,[2,7]),{4:142,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{4:143,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{4:144,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,95],{103:$Vm}),{49:[1,145]},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:146,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,147]},{40:[2,100]},o([40,70],$Vg,{28:[1,148],72:$Vh}),{4:120,6:3,7:4,8:$V0,20:$V1,22:121,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,96:149,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,113],{103:$Vm}),{74:[1,150],103:$Vm},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:151,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,76]),o($Vu,[2,131]),{18:$Vx,20:$V1,22:96,38:$V2,42:$V3,44:$V4,46:$Vz,47:$VA,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,97:152,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VD,[2,105],{72:$Vh}),o($Vu,[2,132]),{42:[1,154],111:[1,155],114:153},o($Vu,[2,138]),{72:$Vh,121:[1,156]},{72:$Vh,119:[2,142]},{20:$V1,22:157,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VJ,[2,8],{13:158,21:[1,159]}),{20:$V1,22:111,38:$V2,42:$V3,44:$V4,45:160,46:$VB,47:$VC,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{38:$VK,42:$VL,50:161,51:162,52:163,55:164,57:$VM},o($VF,[2,38]),o($VN,[2,51]),{42:[1,168]},{40:[1,169]},{40:[1,170]},{40:[1,171]},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:172,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,96],{103:$Vm}),o($Vl,[2,98]),{20:$V1,22:174,24:173,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,175]},{20:$V1,38:$V2,42:$V3,44:$V4,57:$V5,75:176,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($Vl,[2,114],{103:$Vm}),o($VD,[2,108]),{40:[1,177]},{38:$VO,40:$VP,115:178},{38:$VO,40:$VP,115:180},{20:$V1,22:181,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VQ,[2,140],{72:$Vh}),o($VR,[2,10],{14:182,23:[1,183]}),{20:$V1,22:184,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VF,[2,35]),o($VE,[2,40],{28:[1,185]}),o($VS,[2,41],{53:186,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$}),o($V01,[2,43]),o([5,21,23,25,26,28,37,40,54,59,61,62,63,64,65,66,67,68,69,70],$VG,{48:196,42:$VH,58:$VI}),o($V11,[2,47]),o($V11,[2,48]),{4:197,6:3,7:4,8:$V0,20:$V1,22:5,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VN,[2,52]),o($Vl,[2,91]),o($Vl,[2,92]),o($Vl,[2,93]),o($Vl,[2,97],{103:$Vm}),{28:$V21,40:[2,101]},o($V31,[2,103],{72:$Vh}),o($Vl,[2,99]),o($Vl,[2,115],{103:$Vm}),o($Vu,[2,133]),{40:[2,134]},{20:[1,199]},{40:[2,135]},o($VQ,[2,139],{72:$Vh}),o($V41,[2,12],{15:200,25:[1,201]}),{20:$V1,22:174,24:202,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VJ,[2,9],{72:$Vh}),{38:$VK,42:$VL,51:203,52:163,55:164,57:$VM},{38:$VK,42:$VL,52:204,55:164,57:$VM},o($V51,[2,57]),o($V51,[2,58]),o($V51,[2,59]),o($V51,[2,60]),o($V51,[2,61]),o($V51,[2,62]),o($V51,[2,63]),o($V51,[2,64]),o($V51,[2,65]),o($V61,[2,53],{56:205,59:[1,206]}),{40:[1,207]},{20:$V1,22:208,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{40:[1,209]},o($V71,[2,14],{16:210,26:[1,211]}),{20:$V1,22:212,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($VR,[2,11],{28:$V21}),o($VS,[2,42],{53:186,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$}),o($V01,[2,44],{54:[1,213]}),o($V61,[2,46]),{38:[1,214]},o($V11,[2,49]),o($V31,[2,102],{72:$Vh}),{40:[2,137]},o($Vf,[2,25],{17:215,37:[1,216]}),{20:$V1,22:219,27:217,29:218,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($V41,[2,13],{72:$Vh}),{20:$V1,22:220,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},{42:[1,222],60:221},o($Vf,[2,3]),{38:[1,223]},o($V71,[2,15],{28:[1,224]}),o($V81,[2,17]),o($V91,[2,19],{30:225,32:[1,226],33:[1,227],72:$Vh}),o($V01,[2,45],{72:$Vh}),{28:[1,229],40:[1,228]},o($VD,[2,56]),{39:230,41:231,42:$Va1},{20:$V1,22:219,29:233,38:$V2,42:$V3,44:$V4,57:$V5,71:7,73:8,75:9,77:$V6,78:$V7,102:12,104:13,107:14,110:15,111:$V8,112:19,113:$V9,116:$Va,123:$Vb,124:$Vc,125:$Vd},o($V81,[2,22],{31:234,34:[1,235]}),o($V91,[2,20]),o($V91,[2,21]),o($V61,[2,54]),{42:[1,236]},{28:[1,238],40:[1,237]},o($VD,[2,28],{20:$Vb1,42:$Vc1,43:$Vd1,44:$Ve1}),o($Vf1,[2,33]),o($V81,[2,16]),o($V81,[2,18]),{35:[1,243],36:[1,244]},o($VD,[2,55]),o($Vf,[2,26]),{41:245,42:$Va1},o($Vf1,[2,29]),o($Vf1,[2,30]),o($Vf1,[2,31]),o($Vf1,[2,32]),o($V81,[2,23]),o($V81,[2,24]),o($VD,[2,27],{20:$Vb1,42:$Vc1,43:$Vd1,44:$Ve1})],
defaultActions: {28:[2,1],120:[2,100],178:[2,134],180:[2,135],209:[2,137]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 57
break;
case 2:return 47
break;
case 3:/* skip whitespace */
break;
case 4:return 8
break;
case 5:return 19
break;
case 6:return 49
break;
case 7:return 21
break;
case 8:return 18
break;
case 9:return 101
break;
case 10:return 23
break;
case 11:return 25
break;
case 12:return 26
break;
case 13:return 70
break;
case 14:return 28
break;
case 15:return 105
break;
case 16:return 106
break;
case 17:return 108
break;
case 18:return 46
break;
case 19:return 109
break;
case 20:return 43
break;
case 21:return 80
break;
case 22:return 81
break;
case 23:return 83
break;
case 24:return 82
break;
case 25:return 85
break;
case 26:return 84
break;
case 27:return 38
break;
case 28:return 40
break;
case 29:return 103
break;
case 30:return 58
break;
case 31:return 91
break;
case 32:return 92
break;
case 33:return 93
break;
case 34:return 77
break;
case 35:return 94
break;
case 36:return 95
break;
case 37:return 54
break;
case 38:return 74
break;
case 39:return 72
break;
case 40:return 78
break;
case 41:return 67
break;
case 42:return 63
break;
case 43:return 65
break;
case 44:return 61
break;
case 45:return 62
break;
case 46:return 64
break;
case 47:return 66
break;
case 48:return 69
break;
case 49:return 68
break;
case 50:return 116
break;
case 51:return 120
break;
case 52:return 121
break;
case 53:return 122
break;
case 54:return 119
break;
case 55:return 100
break;
case 56:return 32
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 36
break;
case 61:return 37
break;
case 62:return 59
break;
case 63:return 113
break;
case 64:return 44
break;
case 65:return 124
break;
case 66:return 123
break;
case 67:return 20
break;
case 68:return 42
break;
case 69:return 111
break;
case 70:return 125
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:(UNION\s+ALL|UNION|INTERSECT|EXCEPT)\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\s+JOIN\b)/i,/^(?:LEFT\s+OUTER\s+JOIN\b)/i,/^(?:RIGHT\s+OUTER\s+JOIN\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\s+JOIN\b)/i,/^(?:RIGHT\s+JOIN\b)/i,/^(?:FULL\s+JOIN\b)/i,/^(?:NATURAL\s+JOIN\b)/i,/^(?:CROSS\s+JOIN\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:OPTION\b)/i,/^(?:WITH\b)/i,/^(?:CAST\b)/i,/^(?:N?['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:["][a-zA-Z_][a-zA-Z0-9_]*["])/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();