/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,26],$V2=[1,29],$V3=[1,23],$V4=[1,19],$V5=[1,25],$V6=[1,21],$V7=[1,10],$V8=[1,11],$V9=[1,16],$Va=[1,17],$Vb=[1,20],$Vc=[1,24],$Vd=[1,30],$Ve=[1,27],$Vf=[1,28],$Vg=[1,32],$Vh=[5,45,75],$Vi=[2,75],$Vj=[1,33],$Vk=[21,22,40,43,47,49,51,52,62,82,83,110,111,119,121,123,130,131],$Vl=[5,23,25,27,28,30,34,35,36,39,41,42,45,47,54,63,66,67,68,69,70,71,72,73,74,75,77,126,127,128,129],$Vm=[1,36],$Vn=[5,23,25,27,28,30,34,35,36,39,41,42,45,47,54,63,66,67,68,69,70,71,72,73,74,75,77,79,126,127,128,129],$Vo=[1,38],$Vp=[5,23,25,27,28,30,34,35,36,39,41,42,45,47,48,54,63,66,67,68,69,70,71,72,73,74,75,77,79,83,85,86,87,88,89,90,99,100,105,106,108,126,127,128,129],$Vq=[1,59],$Vr=[1,60],$Vs=[5,23,25,27,28,30,34,35,36,39,41,42,45,47,48,54,63,66,67,68,69,70,71,72,73,74,75,77,79,83,85,86,87,88,89,90,99,100,105,106,108,110,111,126,127,128,129],$Vt=[1,62],$Vu=[1,61],$Vv=[1,63],$Vw=[5,23,25,27,28,30,34,35,36,39,41,42,45,47,48,51,54,63,66,67,68,69,70,71,72,73,74,75,77,79,83,85,86,87,88,89,90,99,100,105,106,108,110,111,113,114,126,127,128,129],$Vx=[5,23,25,27,28,30,34,35,36,39,41,42,45,47,48,51,54,63,66,67,68,69,70,71,72,73,74,75,77,79,83,85,86,87,88,89,90,99,100,105,106,108,110,111,113,114,116,126,127,128,129],$Vy=[22,40,43,47,49,51,52,62,82,83,110,111,119,121,123,130,131],$Vz=[22,40,43,47,49,62,96,97,98,110,111,119,121,123,130,131],$VA=[1,100],$VB=[1,101],$VC=[1,108],$VD=[2,116],$VE=[1,109],$VF=[1,110],$VG=[1,120],$VH=[1,121],$VI=[2,148],$VJ=[1,139],$VK=[30,45],$VL=[5,23,25,27,28,39,41,42,45,75],$VM=[5,23,25,27,28,30,39,41,42,45,54,75],$VN=[2,56],$VO=[1,156],$VP=[1,157],$VQ=[5,25,27,28,39,41,42,45,75],$VR=[1,182],$VS=[1,180],$VT=[1,181],$VU=[5,23,25,27,28,30,39,41,42,45,54,59,64,66,67,68,69,70,71,72,73,74,75],$VV=[126,127,129],$VW=[5,27,28,39,41,42,45,75],$VX=[5,23,25,27,28,30,39,41,42,45,75],$VY=[1,200],$VZ=[1,201],$V_=[1,202],$V$=[1,203],$V01=[1,204],$V11=[1,205],$V21=[1,206],$V31=[1,207],$V41=[1,208],$V51=[5,23,25,27,28,30,39,41,42,45,66,67,68,69,70,71,72,73,74,75],$V61=[5,23,25,27,28,30,39,41,42,45,47,59,63,64,66,67,68,69,70,71,72,73,74,75],$V71=[1,211],$V81=[5,27,28,30,39,41,42,45,75],$V91=[5,28,39,41,42,45,75],$Va1=[43,47,62],$Vb1=[5,23,25,27,28,30,39,41,42,45,59,66,67,68,69,70,71,72,73,74,75],$Vc1=[5,39,41,42,45,75],$Vd1=[5,41,42,45,75],$Ve1=[5,42,45,75],$Vf1=[5,30,39,41,42,45,75],$Vg1=[5,30,36,39,41,42,45,75],$Vh1=[1,257],$Vi1=[1,262],$Vj1=[1,260],$Vk1=[1,261],$Vl1=[1,263],$Vm1=[22,30,45,47,48,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"expressionPlus":6,"selectClauseItem":7,"SELECT":8,"optDistinctClause":9,"optTopClause":10,"selectExprList":11,"optTableExprList":12,"optWhereClause":13,"optGroupByClause":14,"optHavingClause":15,"optOrderByClause":16,"optLimitClause":17,"optOffsetClause":18,"optQueryHintsClause":19,"DISTINCT":20,"TOP":21,"NUMERIC":22,"WHERE":23,"expression":24,"GROUP_BY":25,"commaSepExpressionList":26,"HAVING":27,"ORDER_BY":28,"orderByList":29,"COMMA":30,"orderByListItem":31,"optOrderByOrder":32,"optOrderByNulls":33,"ASC":34,"DESC":35,"NULLS":36,"FIRST":37,"LAST":38,"LIMIT":39,"BIND":40,"OFFSET":41,"OPTION":42,"LPAREN":43,"queryHintList":44,"RPAREN":45,"queryHint":46,"IDENTIFIER":47,"CMP_EQUALS":48,"STRING":49,"selectExpr":50,"STAR":51,"QUALIFIED_STAR":52,"optTableExprAlias":53,"FROM":54,"tableExprList":55,"tableExpr":56,"joinComponent":57,"optJoinModifier":58,"ON":59,"tableExprPart":60,"optTableHintsClause":61,"QUALIFIED_IDENTIFIER":62,"AS":63,"WITH":64,"tableHintList":65,"JOIN":66,"LEFT_JOIN":67,"LEFT_OUTER_JOIN":68,"RIGHT_JOIN":69,"RIGHT_OUTER_JOIN":70,"FULL_JOIN":71,"INNER_JOIN":72,"CROSS_JOIN":73,"NATURAL_JOIN":74,"SET_OPERATOR":75,"andCondition":76,"LOGICAL_OR":77,"condition":78,"LOGICAL_AND":79,"operand":80,"conditionRightHandSide":81,"EXISTS":82,"LOGICAL_NOT":83,"compare":84,"CMP_NOTEQUALS":85,"CMP_NOTEQUALS_BASIC":86,"CMP_GREATER":87,"CMP_GREATEROREQUAL":88,"CMP_LESS":89,"CMP_LESSOREQUAL":90,"rhsCompareTest":91,"rhsIsTest":92,"rhsInTest":93,"rhsLikeTest":94,"rhsBetweenTest":95,"ALL":96,"ANY":97,"SOME":98,"IS":99,"IN":100,"rhsInClause":101,"functionParam":102,"functionExpressionList":103,"optFunctionExpressionList":104,"LIKE":105,"BETWEEN":106,"summand":107,"CONCAT":108,"factor":109,"PLUS":110,"MINUS":111,"termPlus":112,"DIVIDE":113,"MODULO":114,"term":115,"PG_CAST":116,"dataType":117,"value":118,"QUOTED_IDENTIFIER":119,"caseWhen":120,"CAST":121,"optDataTypeLength":122,"CASE":123,"caseWhenList":124,"optCaseWhenElse":125,"END":126,"WHEN":127,"THEN":128,"ELSE":129,"BOOLEAN":130,"NULL":131,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SELECT",20:"DISTINCT",21:"TOP",22:"NUMERIC",23:"WHERE",25:"GROUP_BY",27:"HAVING",28:"ORDER_BY",30:"COMMA",34:"ASC",35:"DESC",36:"NULLS",37:"FIRST",38:"LAST",39:"LIMIT",40:"BIND",41:"OFFSET",42:"OPTION",43:"LPAREN",45:"RPAREN",47:"IDENTIFIER",48:"CMP_EQUALS",49:"STRING",51:"STAR",52:"QUALIFIED_STAR",54:"FROM",59:"ON",62:"QUALIFIED_IDENTIFIER",63:"AS",64:"WITH",66:"JOIN",67:"LEFT_JOIN",68:"LEFT_OUTER_JOIN",69:"RIGHT_JOIN",70:"RIGHT_OUTER_JOIN",71:"FULL_JOIN",72:"INNER_JOIN",73:"CROSS_JOIN",74:"NATURAL_JOIN",75:"SET_OPERATOR",77:"LOGICAL_OR",79:"LOGICAL_AND",82:"EXISTS",83:"LOGICAL_NOT",85:"CMP_NOTEQUALS",86:"CMP_NOTEQUALS_BASIC",87:"CMP_GREATER",88:"CMP_GREATEROREQUAL",89:"CMP_LESS",90:"CMP_LESSOREQUAL",96:"ALL",97:"ANY",98:"SOME",99:"IS",100:"IN",105:"LIKE",106:"BETWEEN",108:"CONCAT",110:"PLUS",111:"MINUS",113:"DIVIDE",114:"MODULO",116:"PG_CAST",119:"QUOTED_IDENTIFIER",121:"CAST",123:"CASE",126:"END",127:"WHEN",128:"THEN",129:"ELSE",130:"BOOLEAN",131:"NULL"},
productions_: [0,[3,2],[4,1],[7,12],[9,0],[9,1],[10,0],[10,2],[13,0],[13,2],[14,0],[14,2],[15,0],[15,2],[16,0],[16,2],[29,3],[29,1],[31,3],[32,0],[32,1],[32,1],[33,0],[33,2],[33,2],[17,0],[17,2],[17,2],[18,0],[18,2],[18,2],[19,0],[19,4],[44,3],[44,1],[46,2],[46,2],[46,2],[46,2],[46,1],[11,1],[11,3],[50,1],[50,1],[50,2],[12,0],[12,2],[55,1],[55,3],[56,1],[56,3],[56,5],[57,3],[60,1],[60,1],[60,3],[53,0],[53,1],[53,2],[61,0],[61,4],[65,3],[65,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[6,3],[6,3],[6,1],[6,1],[24,1],[24,3],[76,1],[76,3],[78,1],[78,2],[78,4],[78,2],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[81,1],[81,1],[81,1],[81,1],[81,1],[91,2],[91,5],[91,5],[91,5],[92,2],[92,3],[92,4],[92,5],[93,4],[93,5],[101,1],[101,3],[26,3],[26,1],[102,1],[102,2],[102,1],[102,1],[103,3],[103,1],[104,0],[104,1],[94,2],[94,3],[95,4],[95,5],[80,1],[80,3],[107,1],[107,3],[107,3],[109,1],[109,3],[109,3],[109,3],[112,1],[112,3],[112,2],[112,4],[112,2],[112,4],[115,1],[115,1],[115,1],[115,1],[115,1],[115,3],[115,4],[115,4],[115,6],[117,2],[117,2],[122,0],[122,3],[120,4],[124,5],[124,4],[125,0],[125,2],[118,1],[118,1],[118,1],[118,1],[118,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2: case 7: case 9: case 11: case 13: case 15: case 20: case 21: case 26: case 27: case 29: case 30: case 46: case 53: case 54: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 110: case 112: case 113: case 117: case 122: case 124: case 127: case 131: case 141: case 154: case 155: case 156: case 157: case 158: case 159:
 this.$ = $$[$0]; 
break;
case 3:
 this.$ = {nodeType: 'Select', distinct: $$[$0-10], top: $$[$0-9], columns: $$[$0-8], from: $$[$0-7], where:$$[$0-6], groupBy:$$[$0-5], having:$$[$0-4],
              orderBy:$$[$0-3], limit:$$[$0-2], offset:$$[$0-1], queryHints:$$[$0]}; 
break;
case 4:
 this.$ = false; 
break;
case 5:
 this.$ = true; 
break;
case 6: case 8: case 10: case 12: case 14: case 25: case 28: case 31: case 56: case 59: case 116: case 148: case 153:
 this.$ = null; 
break;
case 16: case 33: case 41: case 48: case 61: case 79: case 108: case 114:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 17: case 34: case 39: case 40: case 47: case 62: case 78: case 109: case 115:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 19: case 63:
 this.$ = ''; 
break;
case 22:
 this.$ = '';
break;
case 23:
 this.$ = 'NULLS FIRST'; 
break;
case 24:
 this.$ = 'NULLS LAST'; 
break;
case 32: case 55: case 60: case 104: case 149:
 this.$ = $$[$0-1]; 
break;
case 35: case 36: case 37: case 38:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 42:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 43:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 44:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 45:
 this.$ = []; 
break;
case 49:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 50:
 this.$ = $$[$0-2]; $$[$0-2].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-1]}); 
break;
case 51:
 this.$ = $$[$0-4]; $$[$0-4].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-3], expression:$$[$0]}); 
break;
case 52:
 this.$ = {exprName: $$[$0-2], alias: $$[$0-1], tableHints: $$[$0]}; 
break;
case 57:
 this.$ = {value: $$[$0] }; 
break;
case 58:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 64:
 this.$ = 'LEFT'; 
break;
case 65:
 this.$ = 'LEFT OUTER'; 
break;
case 66:
 this.$ = 'RIGHT'; 
break;
case 67:
 this.$ = 'RIGHT OUTER'; 
break;
case 68:
 this.$ = 'FULL'; 
break;
case 69:
 this.$ = 'INNER'; 
break;
case 70:
 this.$ = 'CROSS'; 
break;
case 71:
 this.$ = 'NATURAL'; 
break;
case 72: case 73:
 this.$ = $$[$0-2]; $$[$0-2].push({nodeType:'SetOperator', value:$$[$0-1]}); $$[$0-2].push($$[$0]); 
break;
case 74: case 75:
 this.$ = [$$[$0]] 
break;
case 76:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 77:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 80:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 81:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 82:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 83:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 96:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 97: case 98: case 99:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 100:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 101:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 102:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 103:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 105:
 this.$ = $$[$0-1]; $$[$0-1].not = 1; 
break;
case 106:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0]}; 
break;
case 107:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0]}; $$[$0].unshift($$[$0-2]); 
break;
case 111:
 this.$ = { nodeType: 'DistinctFunctionParam', value: $$[$0]}; 
break;
case 118:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 119:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 120:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 121:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 123:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 125: case 126:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 128: case 129: case 130:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 132:
 this.$ = {nodeType: 'TermPlus', term: $$[$0-2], dataType: $$[$0]}; 
break;
case 133: case 135:
 this.$ = {nodeType: 'TermPlus', sign:$$[$0-1], term: $$[$0]}; 
break;
case 134: case 136:
 this.$ = {nodeType: 'TermPlus', sign: $$[$0-3], term: $$[$0-2], dataType: $$[$0]}; 
break;
case 137: case 138: case 139: case 140:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 142:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 143: case 144:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 145:
 this.$ = {nodeType: 'Cast', expression:$$[$0-3], dataType:$$[$0-1]}; 
break;
case 146: case 147:
 this.$ = {name: $$[$0-1], len: $$[$0]}; 
break;
case 150:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 151:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 152:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{1:[3]},{5:[1,31]},o([5,45],[2,2],{75:$Vg}),o($Vh,[2,74]),o($Vh,$Vi,{77:$Vj}),o($Vk,[2,4],{9:34,20:[1,35]}),o($Vl,[2,76],{79:$Vm}),o($Vn,[2,78]),o($Vn,[2,80],{81:37,91:39,92:40,93:41,94:42,95:43,84:44,48:[1,50],83:[1,47],85:[1,51],86:[1,52],87:[1,53],88:[1,54],89:[1,55],90:[1,56],99:[1,45],100:[1,46],105:[1,48],106:[1,49],108:$Vo}),{43:[1,57]},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,78:58,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vp,[2,122],{110:$Vq,111:$Vr}),o($Vs,[2,124],{51:$Vt,113:$Vu,114:$Vv}),o($Vw,[2,127]),o($Vw,[2,131],{116:[1,64]}),{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,115:65,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,115:66,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vx,[2,137]),o($Vx,[2,138],{43:[1,67]}),o($Vx,[2,139]),o($Vx,[2,140],{43:[1,68]}),o($Vx,[2,141]),{6:69,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{43:[1,70]},o($Vx,[2,155]),o($Vx,[2,156]),o($Vx,[2,157]),o($Vx,[2,158]),o($Vx,[2,159]),{124:71,127:[1,72]},{1:[2,1]},{7:73,8:$V0,22:$V1,24:74,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:75,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vy,[2,6],{10:76,21:[1,77]}),o($Vk,[2,5]),{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,78:78,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,81]),{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,107:79,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,91]),o($Vn,[2,92]),o($Vn,[2,93]),o($Vn,[2,94]),o($Vn,[2,95]),{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:80,96:[1,81],97:[1,82],98:[1,83],107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{20:[1,86],22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:84,83:[1,85],107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{43:[1,87]},{100:[1,88],105:[1,89],106:[1,90]},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:91,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:92,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vz,[2,84]),o($Vz,[2,85]),o($Vz,[2,86]),o($Vz,[2,87]),o($Vz,[2,88]),o($Vz,[2,89]),o($Vz,[2,90]),{4:93,6:3,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,83]),{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,109:94,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,109:95,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,110:$V9,111:$Va,112:96,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,110:$V9,111:$Va,112:97,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,110:$V9,111:$Va,112:98,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{47:$VA,117:99,119:$VB},o($Vw,[2,133],{116:[1,102]}),o($Vw,[2,135],{116:[1,103]}),{20:$VC,22:$V1,24:107,40:$V2,43:$V3,45:$VD,47:$V4,49:$V5,51:$VE,52:$VF,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,102:106,103:105,104:104,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{20:$VC,22:$V1,24:107,40:$V2,43:$V3,45:$VD,47:$V4,49:$V5,51:$VE,52:$VF,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,102:106,103:105,104:111,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{45:[1,112],75:$Vg},{22:$V1,24:113,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{125:114,126:[2,153],127:[1,115],129:[1,116]},{22:$V1,24:117,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vh,[2,72]),o($Vh,[2,73],{77:$Vj}),o($Vl,[2,77],{79:$Vm}),{11:118,22:$V1,24:122,40:$V2,43:$V3,47:$V4,49:$V5,50:119,51:$VG,52:$VH,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:[1,123]},o($Vn,[2,79]),o($Vp,[2,123],{110:$Vq,111:$Vr}),o($Vn,[2,96],{108:$Vo}),{43:[1,124]},{43:[1,125]},{43:[1,126]},o($Vn,[2,100],{108:$Vo}),{20:[1,128],22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:127,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{54:[1,129]},{4:131,6:3,7:4,8:$V0,22:$V1,24:132,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,101:130,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{43:[1,133]},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:134,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:135,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,118],{108:$Vo}),{79:[1,136],108:$Vo},{45:[1,137]},o($Vs,[2,125],{51:$Vt,113:$Vu,114:$Vv}),o($Vs,[2,126],{51:$Vt,113:$Vu,114:$Vv}),o($Vw,[2,128]),o($Vw,[2,129]),o($Vw,[2,130]),o($Vw,[2,132]),o($Vw,$VI,{122:138,43:$VJ}),o($Vw,$VI,{122:140,43:$VJ}),{47:$VA,117:141,119:$VB},{47:$VA,117:142,119:$VB},{45:[1,143]},{30:[1,144],45:[2,117]},o($VK,[2,115]),o($VK,[2,110],{77:$Vj}),{22:$V1,24:145,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VK,[2,112]),o($VK,[2,113]),{45:[1,146]},o($Vx,[2,142]),{63:[1,147],77:$Vj},{126:[1,148]},{22:$V1,24:149,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{22:$V1,24:150,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{77:$Vj,128:[1,151]},o($VL,[2,45],{12:152,30:[1,153],54:[1,154]}),o($VM,[2,40]),o($VM,[2,42]),o($VM,[2,43]),o($VM,$VN,{53:155,47:$VO,63:$VP,77:$Vj}),o($Vy,[2,7]),{4:158,6:3,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{4:159,6:3,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{4:160,6:3,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,101],{108:$Vo}),{54:[1,161]},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:162,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{45:[1,163]},{45:[2,106]},o([45,75],$Vi,{30:[1,164],77:$Vj}),{4:131,6:3,7:4,8:$V0,22:$V1,24:132,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,101:165,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,119],{108:$Vo}),{79:[1,166],108:$Vo},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:167,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,82]),o($Vw,[2,146]),{22:[1,168]},o($Vw,[2,147]),o($Vw,[2,134]),o($Vw,[2,136]),o($Vx,[2,143]),{20:$VC,22:$V1,24:107,40:$V2,43:$V3,47:$V4,49:$V5,51:$VE,52:$VF,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,102:169,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VK,[2,111],{77:$Vj}),o($Vx,[2,144]),{47:$VA,117:170,119:$VB},o($Vx,[2,150]),{77:$Vj,128:[1,171]},{77:$Vj,126:[2,154]},{22:$V1,24:172,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VQ,[2,8],{13:173,23:[1,174]}),{22:$V1,24:122,40:$V2,43:$V3,47:$V4,49:$V5,50:175,51:$VG,52:$VH,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{43:$VR,47:$VS,55:176,56:177,57:178,60:179,62:$VT},o($VM,[2,44]),o($VU,[2,57]),{47:[1,183]},{45:[1,184]},{45:[1,185]},{45:[1,186]},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:187,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,102],{108:$Vo}),o($Vn,[2,104]),{22:$V1,24:189,26:188,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{45:[1,190]},{22:$V1,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,80:191,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vn,[2,120],{108:$Vo}),{45:[1,192]},o($VK,[2,114]),{45:[1,193]},{22:$V1,24:194,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VV,[2,152],{77:$Vj}),o($VW,[2,10],{14:195,25:[1,196]}),{22:$V1,24:197,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VM,[2,41]),o($VL,[2,46],{30:[1,198]}),o($VX,[2,47],{58:199,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41}),o($V51,[2,49]),o([5,23,25,27,28,30,39,41,42,45,59,64,66,67,68,69,70,71,72,73,74,75],$VN,{53:209,47:$VO,63:$VP}),o($V61,[2,53]),o($V61,[2,54]),{4:210,6:3,7:4,8:$V0,22:$V1,24:5,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VU,[2,58]),o($Vn,[2,97]),o($Vn,[2,98]),o($Vn,[2,99]),o($Vn,[2,103],{108:$Vo}),{30:$V71,45:[2,107]},o($V81,[2,109],{77:$Vj}),o($Vn,[2,105]),o($Vn,[2,121],{108:$Vo}),o($Vw,[2,149]),o($Vx,[2,145]),o($VV,[2,151],{77:$Vj}),o($V91,[2,12],{15:212,27:[1,213]}),{22:$V1,24:189,26:214,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VQ,[2,9],{77:$Vj}),{43:$VR,47:$VS,56:215,57:178,60:179,62:$VT},{43:$VR,47:$VS,57:216,60:179,62:$VT},o($Va1,[2,63]),o($Va1,[2,64]),o($Va1,[2,65]),o($Va1,[2,66]),o($Va1,[2,67]),o($Va1,[2,68]),o($Va1,[2,69]),o($Va1,[2,70]),o($Va1,[2,71]),o($Vb1,[2,59],{61:217,64:[1,218]}),{45:[1,219]},{22:$V1,24:220,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vc1,[2,14],{16:221,28:[1,222]}),{22:$V1,24:223,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($VW,[2,11],{30:$V71}),o($VX,[2,48],{58:199,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,71:$V11,72:$V21,73:$V31,74:$V41}),o($V51,[2,50],{59:[1,224]}),o($Vb1,[2,52]),{43:[1,225]},o($V61,[2,55]),o($V81,[2,108],{77:$Vj}),o($Vd1,[2,25],{17:226,39:[1,227]}),{22:$V1,24:230,29:228,31:229,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($V91,[2,13],{77:$Vj}),{22:$V1,24:231,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},{47:[1,233],65:232},o($Ve1,[2,28],{18:234,41:[1,235]}),{22:[1,236],40:[1,237]},o($Vc1,[2,15],{30:[1,238]}),o($Vf1,[2,17]),o($Vg1,[2,19],{32:239,34:[1,240],35:[1,241],77:$Vj}),o($V51,[2,51],{77:$Vj}),{30:[1,243],45:[1,242]},o($VK,[2,62]),o($Vh,[2,31],{19:244,42:[1,245]}),{22:[1,246],40:[1,247]},o($Vd1,[2,26]),o($Vd1,[2,27]),{22:$V1,24:230,31:248,40:$V2,43:$V3,47:$V4,49:$V5,62:$V6,76:7,78:8,80:9,82:$V7,83:$V8,107:12,109:13,110:$V9,111:$Va,112:14,115:15,118:18,119:$Vb,120:22,121:$Vc,123:$Vd,130:$Ve,131:$Vf},o($Vf1,[2,22],{33:249,36:[1,250]}),o($Vg1,[2,20]),o($Vg1,[2,21]),o($Vb1,[2,60]),{47:[1,251]},o($Vh,[2,3]),{43:[1,252]},o($Ve1,[2,29]),o($Ve1,[2,30]),o($Vf1,[2,16]),o($Vf1,[2,18]),{37:[1,253],38:[1,254]},o($VK,[2,61]),{44:255,46:256,47:$Vh1},o($Vf1,[2,23]),o($Vf1,[2,24]),{30:[1,259],45:[1,258]},o($VK,[2,34],{22:$Vi1,47:$Vj1,48:$Vk1,49:$Vl1}),o($Vm1,[2,39]),o($Vh,[2,32]),{46:264,47:$Vh1},o($Vm1,[2,35]),o($Vm1,[2,36]),o($Vm1,[2,37]),o($Vm1,[2,38]),o($VK,[2,33],{22:$Vi1,47:$Vj1,48:$Vk1,49:$Vl1})],
defaultActions: {31:[2,1],131:[2,106]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 62
break;
case 2:return 52
break;
case 3:/* skip whitespace */
break;
case 4:return 8
break;
case 5:return 21
break;
case 6:return 54
break;
case 7:return 23
break;
case 8:return 20
break;
case 9:return 106
break;
case 10:return 25
break;
case 11:return 27
break;
case 12:return 28
break;
case 13:return 39
break;
case 14:return 41
break;
case 15:return 75
break;
case 16:return 30
break;
case 17:return 110
break;
case 18:return 111
break;
case 19:return 113
break;
case 20:return 51
break;
case 21:return 114
break;
case 22:return 48
break;
case 23:return 85
break;
case 24:return 86
break;
case 25:return 88
break;
case 26:return 87
break;
case 27:return 90
break;
case 28:return 89
break;
case 29:return 43
break;
case 30:return 45
break;
case 31:return 108
break;
case 32:return 63
break;
case 33:return 96
break;
case 34:return 97
break;
case 35:return 98
break;
case 36:return 82
break;
case 37:return 99
break;
case 38:return 100
break;
case 39:return 59
break;
case 40:return 79
break;
case 41:return 77
break;
case 42:return 83
break;
case 43:return 72
break;
case 44:return 68
break;
case 45:return 70
break;
case 46:return 66
break;
case 47:return 67
break;
case 48:return 69
break;
case 49:return 71
break;
case 50:return 74
break;
case 51:return 73
break;
case 52:return 123
break;
case 53:return 127
break;
case 54:return 128
break;
case 55:return 129
break;
case 56:return 126
break;
case 57:return 105
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 36
break;
case 61:return 37
break;
case 62:return 38
break;
case 63:return 42
break;
case 64:return 64
break;
case 65:return 121
break;
case 66:return 116
break;
case 67:return 49
break;
case 68:return 131
break;
case 69:return 130
break;
case 70:return 22
break;
case 71:return 47
break;
case 72:return 119
break;
case 73:return 40
break;
case 74:return 5
break;
case 75:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:LIMIT\b)/i,/^(?:OFFSET\b)/i,/^(?:(UNION\s+ALL|UNION|INTERSECT|EXCEPT)\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\s+JOIN\b)/i,/^(?:LEFT\s+OUTER\s+JOIN\b)/i,/^(?:RIGHT\s+OUTER\s+JOIN\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\s+JOIN\b)/i,/^(?:RIGHT\s+JOIN\b)/i,/^(?:FULL\s+JOIN\b)/i,/^(?:NATURAL\s+JOIN\b)/i,/^(?:CROSS\s+JOIN\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:OPTION\b)/i,/^(?:WITH\b)/i,/^(?:CAST\b)/i,/^(?:::)/i,/^(?:N?['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false)\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:["][a-zA-Z_][a-zA-Z0-9_]*["])/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();